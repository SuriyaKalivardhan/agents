@page "/agents"
@inject HttpClient http
@inject AssistantsClient assistantClient
@using Azure
@using Azure.AI.OpenAI.Assistants
@using Azure.AI.Runtime
@using Microsoft.AspNetCore.Components.QuickGrid;
@attribute [StreamRendering]

<PageTitle>Agents</PageTitle>

<h1>Agents</h1>

@if (assistants == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <div class="ac-textBlock" style="">
    <p>
        <a href="agents/create">Create Agent</a>
        <a href="agents/createGraph">Create Graph</a>
    </p>
    
    <QuickGrid Items="assistants" Pagination="pagination">
        <PropertyColumn Property="@(p => p.Name)" Sortable="true" />
        <PropertyColumn Property="@(p => p.Description)" Sortable="true" />
        <PropertyColumn Property="@(p => p.Model)" Sortable="true" />
        <PropertyColumn Title="Function Count" Property="@(p => p.UserFunctions.Length)" Sortable="true" />
        <PropertyColumn Title="Index Count" Property="@(p => p.Indexes.Length)" Sortable="true" />
        <TemplateColumn Context="agent">
            <a href="@($"agents/edit?id={agent.Id}")">Edit</a> |
            <a href="@($"agents/interact?id={agent.Id}")">Interact</a> |
            <a href="@($"agents/delete?id={agent.Id}")">Delete</a> |
            <a href="@($"agents/runs?id={agent.Id}")">Runs</a>
        </TemplateColumn>
    </QuickGrid>

    <Paginator State="pagination" />
    </div>
}

@code {

    PaginationState pagination = new PaginationState { ItemsPerPage = 20 };

    private string nameFilter = string.Empty;    
    private IQueryable<Agent>? assistants;
    private IQueryable<Agent> FilteredAgents
    {
        get
        {
            return this.assistants.Where(m => m.Name!.Contains(nameFilter));
        }
    }

    protected override async Task OnInitializedAsync()
    {
        IList<Agent> responseList = new List<Agent>();
        Response<PageableList<Assistant>> response = await assistantClient.GetAssistantsAsync();
        if (response.Value != null)
        {            
            foreach(Assistant assistant in response.Value)
            {
                Agent agent = new Agent
                    {
                        Id = assistant.Id,
                        Name = assistant.Name,
                        Description = assistant.Description,
                        Instructions = assistant.Instructions,
                        Model = assistant.Model
                    };

                IList<string> userFunctions = new List<string>();
                IList<string> indexes = new List<string>();
                foreach(ToolDefinition toolDefinition in assistant.Tools)
                {
                    if(toolDefinition is FunctionToolDefinition fDef)
                    {
                        userFunctions.Add(fDef.Name);
                    }
                    else if(toolDefinition is RetrievalToolDefinition rd)
                    {
                        continue;
                    }
                }
                agent.UserFunctions = userFunctions.ToArray();
                agent.Indexes = indexes.ToArray();
                responseList.Add(agent);
            }            
        }
        assistants = responseList.AsQueryable();
    }    
}
